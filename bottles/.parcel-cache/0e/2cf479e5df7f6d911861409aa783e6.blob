var _cdguglerShatter = require('@cdgugler/shatter');
const $ = str => document.querySelector(str);
const $$ = str => document.querySelectorAll(str);
const rand = (min, max) => Math.random() * (max - min) + min;
const shattered = new _cdguglerShatter.Shatter('jameson.png');
(function () {
  const app = {
    init: function () {
      let imgs = $$("img");
      imgs.forEach((item, idx) => {
        let id = item.src.replace(/\.png/, '').replace(/^.*\//, '').replace(/\..*/, '');
        app.state.maxHeight = Math.max(app.state.maxHeight, item.height);
        app.state.maxWidth = Math.max(app.state.maxWidth, item.width);
        app.state.bottles[id].img = item;
        item.width = app.state.bottles[id].width;
        item.height = app.state.bottles[id].height;
        item.style.width = app.state.bottles[id].width + 'px';
        item.style.height = app.state.bottles[id].height + 'px';
        app.state.images.push(item);
      });
      /*
      app.config.bottles.forEach((item, idx) => {
      app.loadImage(item + '.png').then((img) => {
      app.state.maxHeight = Math.max(app.state.maxHeight, img.height);
      app.state.maxWidth = Math.max(app.state.maxWidth, img.width);
      app.state.images.push(img);
      app.config.images[item] = img;
      if (idx === app.config.bottles.length -1) {
      app.state.loaded = true;
      app.setup();
      }
      });
      });
      */
      app.canvas = $("canvas");
      app.canvas.height = window.innerHeight;
      app.canvas.width = window.innerWidth;
      app.canvas.style.width = window.innerWidth + 'px';
      app.canvas.style.height = window.innerHeight + 'px';
      app.ctx = app.canvas.getContext('2d');
      app.canvas.addEventListener("click", app.doClick);
      $("#bottles").addEventListener("click", app.clickBottle);
    },
    loadImage: function (url) {
      const img = document.createElement('img');
      return new Promise((resolve, reject) => {
        img.onload = () => resolve(img);
        img.onerror = reject;
        img.src = url;
      });
    },
    setup: function () {
      let row = -1, col = 0, xpix = 0;
      let scale = 0.5;
      app.config.bottles.forEach((item, idx) => {
        if (!(idx % 19)) {
          row++;
          col = 0;
          xpix = 0;
        }
        app.ctx.drawImage(app.state.images[idx], 0, 0, app.state.bottles[item].width, app.state.bottles[item].height, xpix, row * (app.state.maxHeight * scale) + (app.state.maxHeight * scale - app.state.bottles[item].height * scale), app.state.bottles[item].width * scale, app.state.bottles[item].height * scale);
        xpix += app.state.bottles[item].width * scale + 2;
        col++;
      });
    },
    clickBottle: function (e) {
      console.log("Bottle clicked!");
      console.dir(e);
    },
    doClick: function (e) {
      app.addParticles(e.offsetX, e.offsetY);
    },
    config: {
      bottles: ['absolute', 'amaro', 'baileys', 'becherovka', 'beefeater', 'chivasregal', 'contreau', 'curacao', 'havanaclub', 'jackdaniels', 'jagermeister', 'jameson', 'kahlua', 'malibu', 'martell', 'olmeca', 'pernod', 'sambuca'],
      images: {},
      particles: {
        number: 40,
        // number of particles
        size: {
          // range for particle size
          x: [10, 30],
          y: [10, 30]
        },
        initSpeed: 15,
        // power of explosion
        gravity: 0.3,
        // defines how fast particles fall
        drag: 0.08,
        // how wide is explosion
        terminalVelocity: 3,
        // fastest particles can fall
        flipSpeed: 0.1
      },
      scale: 0.5
    },
    state: {
      loaded: false,
      images: [],
      maxHeight: 0,
      maxWidth: 0,
      particles: [],
      bottles: {
        "absolute": {
          "width": 144,
          "height": 446,
          "src": "absolute"
        },
        "amaro": {
          "width": 136,
          "height": 518,
          "src": "amaro"
        },
        "baileys": {
          "width": 168,
          "height": 414,
          "src": "baileys"
        },
        "becherovka": {
          "width": 162,
          "height": 444,
          "src": "becherovka"
        },
        "beefeater": {
          "width": 142,
          "height": 518,
          "src": "beefeater"
        },
        "chivasregal": {
          "width": 174,
          "height": 450,
          "src": "chivasregal"
        },
        "contreau": {
          "width": 158,
          "height": 380,
          "src": "contreau"
        },
        "curacao": {
          "width": 248,
          "height": 420,
          "src": "curacao"
        },
        "havanaclub": {
          "width": 122,
          "height": 506,
          "src": "havanaclub"
        },
        "jackdaniels": {
          "width": 184,
          "height": 516,
          "src": "jackdaniels"
        },
        "jagermeister": {
          "width": 182,
          "height": 400,
          "src": "jagermeister"
        },
        "jameson": {
          "width": 144,
          "height": 542,
          "src": "jameson"
        },
        "kahlua": {
          "width": 144,
          "height": 478,
          "src": "kahlua"
        },
        "malibu": {
          "width": 148,
          "height": 506,
          "src": "malibu"
        },
        "martell": {
          "width": 160,
          "height": 524,
          "src": "martell"
        },
        "olmeca": {
          "width": 142,
          "height": 434,
          "src": "olmeca"
        },
        "pernod": {
          "width": 144,
          "height": 510,
          "src": "pernod"
        },
        "sambuca": {
          "width": 126,
          "height": 500,
          "src": "sambuca"
        }
      }
    },
    shatter: async function (bottle, num = 10) {
      console.dir(bottle);
      const voropieces = _cdguglerShatter.VoronoiPieces({
        height: bottle.height,
        width: bottle.width,
        numPieces: num
      });
      app.ctx.beginPath();
      app.ctx.moveTo(100, 100);
      app.ctx.strokeStyle = 'red';
      voropieces.forEach((points, idx) => {
        app.ctx.moveTo(points[0][0], points[0][1]);
        points.forEach((point, idx) => {
          app.ctx.lineTo(point[0], point[1]);
        });
      });
      app.ctx.stroke();
      const vshatter = new _cdguglerShatter.Shatter(bottle.img.src);
      vshatter.setPieces(voropieces);
      let results = await vshatter.shatter();
      console.dir(results);
      const rdiv = $(".results"), assembled = $(".assembled");
      app.addParticles(400, 400, results);
      assembled.innerHTML = '';
      rdiv.innerHTML = '';
      assembled.style.width = window.innerWidth + 'px';
      assembled.style.height = window.innerHeight + 'px';
      results.forEach((res, i) => {
        rdiv.appendChild(res.image);
        const clone = res.image.cloneNode();
        clone.setAttribute('style', `position: absolute; top: ${res.y}px; left: ${res.x}px;animation-duration:${~~(Math.random() * 900) + 400}ms; animation-delay:${~~(Math.random() * 500) + 300}ms;`);
        assembled.appendChild(clone);
        setTimeout(function () {
          clone.style.top = "1000px";
          clone.style.left = "1600px";
        }, 100);
      });
    },
    addParticles: function (x = 400, y = 300, parts) {
      for (let i = 0; i < parts.length; i++) {
        app.state.particles.push(new Particle(x, y, parts[i]));
      }
      window.requestAnimationFrame(app.updateParticle);
    },
    updateParticle: function () {
      app.ctx.clearRect(0, 0, app.canvas.width, app.canvas.height);
      app.state.particles.forEach((c, i) => {
        c.render();
        if (c.remove) {
          app.state.particles.splice(i, 1);
        }
        app.ctx.setTransform(1, 0, 0, 1, 0, 0);
      });
      if (app.state.particles.length) window.requestAnimationFrame(app.updateParticle);
    }
  };
  window.app = app;
  window.onload = app.init;
  function Bottle(x, y, scale) {
    this.drink = app.config.bottles[~~(Math.random() * app.config.bottles.length)];
    this.x = x;
    this.y = y;
    this.scale = scale;
    this.image = app.config.images[this.drink];
    this.width = app.state.bottles[this.drink].width;
    this.height = app.state.bottles[this.drink].height;
    function update() {}
    function render() {
      app.ctx.drawImage(this.image, 0, 0, this.width, this.height, this.x, this.y, this.x + this.width * this.scale, this.y + this.height * this.scale);
    }
  }
  function Particle(x, y, part) {
    this.randomModifier = rand(-1, 1);
    this.dimensions = {
      x: part.image.offsetWidth,
      y: part.image.offsetHeight
    };
    this.position = {
      x: x,
      y: y
    };
    this.rotation = rand(0, 2 * Math.PI);
    this.scale = {
      x: 1,
      y: 1
    };
    this.part = part;
    this.velocity = {
      x: rand(-app.config.particles.initSpeed, app.config.particles.initSpeed) * 0.4,
      y: rand(-app.config.particles.initSpeed, app.config.particles.initSpeed)
    };
    this.flipSpeed = rand(0.2, 1.5) * app.config.particles.flipSpeed;
    this.terminalVelocity = rand(.5, 1.5) * app.config.particles.terminalVelocity;
    this.remove = false;
    this.update = function () {
      this.velocity.x *= 0.985;
      this.position.x += this.velocity.x;
      this.velocity.y += this.randomModifier * app.config.particles.drag;
      this.velocity.y += app.config.particles.gravity;
      this.velocity.y = Math.min(this.velocity.y, this.terminalVelocity);
      this.position.y += this.velocity.y;
      this.scale.y = Math.cos((this.position.y + this.randomModifier) * this.flipSpeed);
      // this.color = this.scale.y > 0 ? this.colorPair.front : this.colorPair.back;
      this.color = this.scale.y > 0 ? '#111111' : '#eeeeee';
    };
    this.render = function () {
      this.update();
      app.ctx.translate(this.position.x, this.position.y);
      app.ctx.rotate(this.rotation);
      const width = this.dimensions.x * this.scale.x;
      const height = this.dimensions.y * this.scale.y;
      app.ctx.fillStyle = this.color;
      // app.ctx.fillRect(-0.5 * width, -0.5 * height, width, height);
      app.ctx.drawImage(this.part.image, 0, 0, this.part.image.offsetWidth, this.part.image.offsetHeight, -0.5 * width, -0.5 * height, width, height);
      this.dimensions.x -= 0.125;
      this.dimensions.y -= 0.125;
      if (this.dimensions.x < 0 || this.dimensions.y < 0) {
        this.remove = true;
      }
      app.ctx.setTransform(1, 0, 0, 1, 0, 0);
    };
  }
  function updateParticle() {
    app.ctx.clearRect(0, 0, app.WIDTH, app.HEIGHT);
    app.state.particles.forEach((c, i) => {
      c.render();
      if (c.remove) {
        app.state.particles.splice(i, 1);
      }
      app.ctx.setTransform(1, 0, 0, 1, 0, 0);
    });
    if (app.state.particles.length) window.requestAnimationFrame(app.updateParticle);
  }
  function addParticles(x = 400, y = 300, img = app.state.images[3]) {
    for (let i = 0; i < app.config.particles.number; i++) {
      app.state.particles.push(new Particle(x, y));
    }
    window.requestAnimationFrame(app.updateParticle);
  }
})();
